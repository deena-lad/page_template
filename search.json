[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Deena Lad",
    "section": "",
    "text": "GitHub\n      \n      \n        \n          LinkedIn\n      \n      \n        \n          Email\n      \n    \n  \n  \n    \n      Hi, Iâ€™m Deena ðŸ‘‹. I recently completed my M.Tech in Data Science and have worked on projects spanning cyclone intensity forecasting at ISRO to Prompt Engineering at Jio Platforms Limited.\n    \n\n    \n      My interests lie in Deep Learning, Geospatial Data Analytics, Environmental Modelling, and Iâ€™m interested about applying them to solve real-world problems. For me, the beauty of data science lies in the math beneath it.\n       \n\n    \n      Beyond data, I am a trained Bharatanatyam dancer and enjoy immersing myself in the mysterious worlds of Agatha Christie."
  },
  {
    "objectID": "index.html#my-journey-so-far",
    "href": "index.html#my-journey-so-far",
    "title": "Deena Lad",
    "section": "My Journey So Far",
    "text": "My Journey So Far\n\n\n\nJuly 2024 - April 2025\n\n\nSuccessfully Completed Research Internship at Space Application Center, ISRO, Ahmedabad\n\n\n\n\nMay 2024 - July 2024\n\n\nSuccessfully Completed Summer Internship at Jio Platforms Limited"
  },
  {
    "objectID": "blog-posts/HTAP_19_20.html",
    "href": "blog-posts/HTAP_19_20.html",
    "title": "HTAP Emissions Analysis: India 2019 vs 2020",
    "section": "",
    "text": "This notebook presents a comparative analysis of emissions data from the HTAP dataset for the years 2019 and 2020.\nThe focus is on global patterns, with focus into the Indian subcontinent.\nimport xarray as xr\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nfrom cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter"
  },
  {
    "objectID": "blog-posts/HTAP_19_20.html#dataset-overview",
    "href": "blog-posts/HTAP_19_20.html#dataset-overview",
    "title": "HTAP Emissions Analysis: India 2019 vs 2020",
    "section": "Dataset Overview",
    "text": "Dataset Overview\nWe use HTAP emissions data for the years 2019 and 2020.\nThe dataset contains spatially gridded emissions for multiple categories.\n\nds_2019 = xr.open_dataset(r\"C:\\Users\\Deena\\Desktop\\IITGN\\current\\HTAP\\edgar_HTAPv31_2019_PM2.5.nc\")  \nds_2020 = xr.open_dataset(r\"C:\\Users\\Deena\\Desktop\\IITGN\\current\\HTAP\\edgar_HTAPv31_2020_PM2.5.nc\")\n\n\nds_2019, ds_2020\n\n(&lt;xarray.Dataset&gt;\n Dimensions:                                  (time: 12, lat: 360, lon: 720)\n Coordinates:\n   * lat                                      (lat) float64 -89.75 ... 89.75\n   * lon                                      (lon) float64 -179.8 ... 179.8\n   * time                                     (time) datetime64[ns] 2019-01-15...\n Data variables: (12/20)\n     HTAPv3_1_International_Shipping          (time, lat, lon) float32 ...\n     HTAPv3_2_1_1_Domestic_Aviation_LTO       (time, lat, lon) float32 ...\n     HTAPv3_2_1_2_Domestic_Aviation_CDS       (time, lat, lon) float32 ...\n     HTAPv3_2_1_3_Domestic_Aviation_CRS       (time, lat, lon) float32 ...\n     HTAPv3_2_2_1_International_Aviation_LTO  (time, lat, lon) float32 ...\n     HTAPv3_2_2_2_International_Aviation_CDS  (time, lat, lon) float32 ...\n     ...                                       ...\n     HTAPv3_5_4_Other_ground_transport        (time, lat, lon) float32 ...\n     HTAPv3_6_Residential                     (time, lat, lon) float32 ...\n     HTAPv3_7_Waste                           (time, lat, lon) float32 ...\n     HTAPv3_8_1_Agricultural_waste_burning    (time, lat, lon) float32 ...\n     HTAPv3_8_2_Agriculture_livestock         (time, lat, lon) float32 ...\n     HTAPv3_8_3_Agriculture_crops             (time, lat, lon) float32 ...\n Attributes:\n     description:  EDGAR_HTAPv3.1 - https://edgar.jrc.ec.europa.eu/dataset_hta...,\n &lt;xarray.Dataset&gt;\n Dimensions:                                  (time: 12, lat: 360, lon: 720)\n Coordinates:\n   * lat                                      (lat) float64 -89.75 ... 89.75\n   * lon                                      (lon) float64 -179.8 ... 179.8\n   * time                                     (time) datetime64[ns] 2020-01-15...\n Data variables: (12/20)\n     HTAPv3_1_International_Shipping          (time, lat, lon) float32 ...\n     HTAPv3_2_1_1_Domestic_Aviation_LTO       (time, lat, lon) float32 ...\n     HTAPv3_2_1_2_Domestic_Aviation_CDS       (time, lat, lon) float32 ...\n     HTAPv3_2_1_3_Domestic_Aviation_CRS       (time, lat, lon) float32 ...\n     HTAPv3_2_2_1_International_Aviation_LTO  (time, lat, lon) float32 ...\n     HTAPv3_2_2_2_International_Aviation_CDS  (time, lat, lon) float32 ...\n     ...                                       ...\n     HTAPv3_5_4_Other_ground_transport        (time, lat, lon) float32 ...\n     HTAPv3_6_Residential                     (time, lat, lon) float32 ...\n     HTAPv3_7_Waste                           (time, lat, lon) float32 ...\n     HTAPv3_8_1_Agricultural_waste_burning    (time, lat, lon) float32 ...\n     HTAPv3_8_2_Agriculture_livestock         (time, lat, lon) float32 ...\n     HTAPv3_8_3_Agriculture_crops             (time, lat, lon) float32 ...\n Attributes:\n     description:  EDGAR_HTAPv3.1 - https://edgar.jrc.ec.europa.eu/dataset_hta...)"
  },
  {
    "objectID": "blog-posts/HTAP_19_20.html#global-emission-comparison",
    "href": "blog-posts/HTAP_19_20.html#global-emission-comparison",
    "title": "HTAP Emissions Analysis: India 2019 vs 2020",
    "section": "Global Emission Comparison",
    "text": "Global Emission Comparison\nWe begin with a global view of category-wise emissions in 2019 vs 2020.\n\ndef read_files(file_2019, file_2020):\n    ds_2019 = xr.open_dataset(file_2019)\n    ds_2020 = xr.open_dataset(file_2020)\n    \n    return ds_2019, ds_2020\n\n\ndef calculate_percentiles(data_array):\n    # Remove NaN values for percentile calculation\n    valid_data = data_array.values[~np.isnan(data_array.values)]\n    \n    if len(valid_data) == 0:\n        return 0, 0\n    \n    p10 = np.percentile(valid_data, 10)\n    p90 = np.percentile(valid_data, 90)\n    \n    # print(f\"10th percentile: {p10:.2e}\")\n    # print(f\"90th percentile: {p90:.2e}\")\n    \n    return p10, p90\n\n\ndef filter_data_by_percentiles(data_array, p10, p90):\n    \n    filtered_data = data_array.copy()\n    filtered_data = filtered_data.where((filtered_data &gt;= p10) & (filtered_data &lt;= p90))\n    \n    return filtered_data\n\n\ndef plot_side_by_side(ds_2019, ds_2020, variable_name, month):\n\n    data_2019 = ds_2019[variable_name].sel(time=ds_2019.time.dt.month == month)\n    data_2020 = ds_2020[variable_name].sel(time=ds_2020.time.dt.month == month)\n    \n    # If multiple time steps for the same month, take the mean\n    if len(data_2019.time) &gt; 1:\n        data_2019 = data_2019.mean(dim='time')\n    else:\n        data_2019 = data_2019.squeeze()\n        \n    if len(data_2020.time) &gt; 1:\n        data_2020 = data_2020.mean(dim='time')\n    else:\n        data_2020 = data_2020.squeeze()\n    \n    print(f\"Calculating percentiles for {variable_name}...\")\n    p10_2019, p90_2019 = calculate_percentiles(data_2019)\n    p10_2020, p90_2020 = calculate_percentiles(data_2020)\n    \n    # Use the combined percentiles from both years for consistent filtering\n    combined_data = xr.concat([data_2019, data_2020], dim='temp')\n    p10_combined, p90_combined = calculate_percentiles(combined_data)\n    \n    # Filter data by percentiles (but keep original values)\n    filtered_2019 = filter_data_by_percentiles(data_2019, p10_2019, p90_2019)\n    filtered_2020 = filter_data_by_percentiles(data_2020, p10_2020, p90_2020)\n    \n    # Create figure with side-by-side subplots\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(20, 10),\n                                   subplot_kw={'projection': ccrs.PlateCarree()})\n    \n    # Add map features\n    for ax in [ax1, ax2]:\n        ax.add_feature(cfeature.COASTLINE, linewidth=0.5)\n        ax.add_feature(cfeature.BORDERS, linewidth=0.3)\n        # ax.add_feature(cfeature.OCEAN, color='lightblue', alpha=0.3)\n        # ax.add_feature(cfeature.LAND, color='lightgray', alpha=0.3)\n        ax.set_global()\n        \n        # Add gridlines\n        gl = ax.gridlines(draw_labels=True, alpha=0.3)\n        gl.top_labels = False\n        gl.right_labels = False\n    \n    # Use the same colormap and scale for both plots\n    vmin = min(filtered_2019.min().values, filtered_2020.min().values)\n    vmax = max(filtered_2019.max().values, filtered_2020.max().values)\n    \n    # Plot 2019 data\n    im1 = filtered_2019.plot(ax=ax1, transform=ccrs.PlateCarree(), \n                            cmap='turbo', add_colorbar=False, \n                            alpha=0.8, vmin=vmin, vmax=vmax)\n    ax1.set_title(f'2019 {variable_name} - Month {month}', \n                  fontsize=12, fontweight='bold')\n    \n    # Plot 2020 data\n    im2 = filtered_2020.plot(ax=ax2, transform=ccrs.PlateCarree(), \n                            cmap='turbo', add_colorbar=False, \n                            alpha=0.8, vmin=vmin, vmax=vmax)\n    ax2.set_title(f'2020 {variable_name} - Month {month}', \n                  fontsize=12, fontweight='bold')\n    \n    # Add colorbars\n    cbar1 = plt.colorbar(im1, ax=ax1, shrink=0.7, pad=0.05)\n    cbar1.set_label(f'{variable_name}', fontsize=10)\n    \n    cbar2 = plt.colorbar(im2, ax=ax2, shrink=0.7, pad=0.05)\n    cbar2.set_label(f'{variable_name}', fontsize=10)\n    \n    plt.tight_layout()\n    \n    # Add main title\n    month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    # category_text = f' - {category}' if category else ''\n    # fig.suptitle(f'{variable_name} Comparison: {month_names[month-1]} 2019 vs 2020{category_text}', \n    #              fontsize=14, fontweight='bold', y=0.98)\n    \n    plt.show()\n    \n    # print(f\"Data range - Min: {vmin:.2e}, Max: {vmax:.2e}\")\n    # print(f\"Filtered using combined percentiles: {p10_combined:.2e} to {p90_combined:.2e}\")\n    \n    return fig, filtered_2019, filtered_2020\n\n\ndef calculate_difference(ds_2019, ds_2020, variable_name, month):\n\n    data_2019 = ds_2019[variable_name].sel(time=ds_2019.time.dt.month == month)\n    data_2020 = ds_2020[variable_name].sel(time=ds_2020.time.dt.month == month)\n    \n    # If multiple time steps for the same month, take the mean\n    if len(data_2019.time) &gt; 1:\n        data_2019 = data_2019.mean(dim='time')\n    else:\n        data_2019 = data_2019.squeeze()\n        \n    if len(data_2020.time) &gt; 1:\n        data_2020 = data_2020.mean(dim='time')\n    else:\n        data_2020 = data_2020.squeeze()\n    \n    # Calculate difference (2020 - 2019)\n    difference = data_2020 - data_2019\n    \n    # Calculate percentiles for filtering the difference\n    print(f\"Calculating percentiles for difference data...\")\n    p10_diff, p90_diff = calculate_percentiles(difference)\n    \n    # Filter difference by percentiles\n    filtered_difference = filter_data_by_percentiles(difference, p10_diff, p90_diff)\n    \n    return difference, filtered_difference\n\n\ndef plot_difference(difference, filtered_difference, variable_name, month, category=None):\n\n    # Create figure\n    fig, ax = plt.subplots(1, 1, figsize=(12, 8),\n                          subplot_kw={'projection': ccrs.PlateCarree()})\n    \n    # Add map features\n    ax.add_feature(cfeature.COASTLINE, linewidth=0.5)\n    ax.add_feature(cfeature.BORDERS, linewidth=0.3)\n    # ax.add_feature(cfeature.OCEAN, color='lightblue', alpha=0.3)\n    # ax.add_feature(cfeature.LAND, color='lightgray', alpha=0.3)\n    ax.set_global()\n    \n    # Add gridlines\n    gl = ax.gridlines(draw_labels=True, alpha=0.3)\n    gl.top_labels = False\n    gl.right_labels = False\n    \n    # Plot difference data (centered at zero for diverging colormap)\n    im = filtered_difference.plot(ax=ax, transform=ccrs.PlateCarree(), \n                                 cmap='viridis', add_colorbar=False, \n                                 alpha=0.8, center=0)\n    \n    # Add colorbar\n    cbar = plt.colorbar(im, ax=ax, shrink=0.7, pad=0.2, extend='both')\n    cbar.set_label(f'{variable_name} Difference (2020 - 2019)', fontsize=12)\n    \n    # Title\n    month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    # category_text = f' - {category}' if category else ''\n    ax.set_title(f'{variable_name} Difference (2020 - 2019): {month_names[month-1]}', \n                fontsize=14, fontweight='bold')\n    \n    plt.tight_layout()\n    plt.show()\n    \n    # # Print statistics\n    # print(f\"Difference statistics:\")\n    # print(f\"  Mean difference: {difference.mean().values:.2e}\")\n    # print(f\"  Min difference: {difference.min().values:.2e}\")\n    # print(f\"  Max difference: {difference.max().values:.2e}\")\n    # print(f\"  Standard deviation: {difference.std().values:.2e}\")\n    \n    return fig\n\n\ndef complete_analysis(file_2019, file_2020, variable_name, month, category=None):\n    print(f\"Complete Analysis: {variable_name} - Month {month}\")\n    \n    # Step 1: Read files\n    print(\"\\nStep 1: Reading files...\")\n    ds_2019, ds_2020 = read_files(file_2019, file_2020)\n    \n    # Check if variable exists\n    if variable_name not in ds_2019.data_vars:\n        print(f\"Error: Variable '{variable_name}' not found in datasets\")\n        print(f\"Available variables: {list(ds_2019.data_vars)}\")\n        return\n    \n    # Step 2: Plot side by side\n    print(f\"\\nStep 2: Plotting {variable_name} side by side...\")\n    fig1, filtered_2019, filtered_2020 = plot_side_by_side(ds_2019, ds_2020, \n                                                          variable_name, month, category)\n    \n    # Step 3: Calculate difference\n    print(f\"\\nStep 3: Calculating difference...\")\n    difference, filtered_difference = calculate_difference(ds_2019, ds_2020, \n                                                          variable_name, month, category)\n    \n    # Step 4: Plot difference\n    print(f\"\\nStep 4: Plotting difference...\")\n    fig2 = plot_difference(difference, filtered_difference, \n                          variable_name, month, category)\n    \n    print(\"\\nAnalysis complete!\")\n    return fig1, fig2\n\n\n# Complete analysis in one go\nfile_19 = r\"C:\\Users\\Deena\\Desktop\\IITGN\\current\\HTAP\\edgar_HTAPv31_2019_PM2.5.nc\"\nfile_20 = r\"C:\\Users\\Deena\\Desktop\\IITGN\\current\\HTAP\\edgar_HTAPv31_2020_PM2.5.nc\"\n\n# complete_analysis(file_19, f], 'co2_emission', month=6)\n\n\n# Step by step\nds_2019, ds_2020 = read_files(file_19, file_20)\n\n\nvars_list = list(ds_2019.data_vars)\n\n\nfor var in vars_list:\n    plot_side_by_side(ds_2019, ds_2020, var, month=4)\n    diff, filt_diff = calculate_difference(ds_2019, ds_2020, var, month=4)\n    plot_difference(diff, filt_diff, var, month=4)\n\nCalculating percentiles for HTAPv3_1_International_Shipping...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_2_1_1_Domestic_Aviation_LTO...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_2_1_2_Domestic_Aviation_CDS...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_2_1_3_Domestic_Aviation_CRS...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_2_2_1_International_Aviation_LTO...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_2_2_2_International_Aviation_CDS...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_2_2_3_International_Aviation_CRS...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_3_Energy...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_4_1_Industry...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_4_2_Fugitive...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_4_3_Solvents...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_5_1_Road_Transport...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_5_2_Brake_and_Tyre_wear...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_5_3_Domestic_shipping...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_5_4_Other_ground_transport...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_6_Residential...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_7_Waste...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_8_1_Agricultural_waste_burning...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_8_2_Agriculture_livestock...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for HTAPv3_8_3_Agriculture_crops...\n\n\n\n\n\n\n\n\n\nCalculating percentiles for difference data...\n\n\n\n\n\n\n\n\n\n\ndiff, filt_diff = calculate_difference(ds_2019, ds_2020, 'HTAPv3_6_Residential', month=4)\nplot_difference(diff, filt_diff, 'HTAPv3_6_Residential', month=4)\n\nCalculating percentiles for difference data..."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "blog-posts/index.html",
    "href": "blog-posts/index.html",
    "title": "My Blogs",
    "section": "",
    "text": "HTAP Emissions Analysis: India 2019 vs 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]